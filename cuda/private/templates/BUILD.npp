_NPP_LIBS = {
    "nppc": [
        "npp.h",
        "nppcore.h",
        "nppdefs.h",
    ],
    "nppial": ["nppi_arithmetic_and_logical_operations.h"],
    "nppicc": ["nppi_color_conversion.h"],
    "nppidei": ["nppi_data_exchange_and_initialization.h"],
    "nppif": ["nppi_filtering_functions.h"],
    "nppig": ["nppi_geometry_transforms.h"],
    "nppim": ["nppi_morphological_operations.h"],
    "nppist": [
        "nppi_statistics_functions.h",
        "nppi_linear_transforms.h",
    ],
    "nppisu": ["nppi_support_functions.h"],
    "nppitc": ["nppi_threshold_and_compare_operations.h"],
    "npps": [
        "npps_arithmetic_and_logical_operations.h",
        "npps_conversion_functions.h",
        "npps_filtering_functions.h",
        "npps.h",
        "npps_initialization.h",
        "npps_statistics_functions.h",
        "npps_support_functions.h",
    ],
}

[
    cc_import_versioned_sos(
        name = name + "_so",
        shared_library = "%{component_name}/%{libpath}/lib{}.so".format(name),
    )
    for name in _NPP_LIBS.keys()
]

[
    cc_import(
        name = name + "_lib",
        interface_library = "%{component_name}/%{libpath}/x64/{}.lib".format(name),
        system_provided = 1,
        target_compatible_with = ["@platforms//os:windows"],
    )
    for name in _NPP_LIBS.keys()
]

[
    cc_library(
        name = name,
        hdrs = ["%{component_name}/include/" + hdr for hdr in hdrs],
        includes = ["%{component_name}/include"],
        visibility = ["//visibility:public"],
        deps = ([":nppc"] if name != "nppc" else []) + if_linux([
            ":{}_so".format(name),
        ]) + if_windows([
            ":{}_lib".format(name),
        ]),
    )
    for name, hdrs in _NPP_LIBS.items()
]

cc_library(
    name = "nppi",
    hdrs = ["%{component_name}/include/nppi.h"],
    deps = [
        ":nppial",
        ":nppicc",
        ":nppidei",
        ":nppif",
        ":nppig",
        ":nppim",
        ":nppist",
        ":nppisu",
        ":nppitc",
    ],
)
