name: Test Example Build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    name: "Test Examples Build (CUDA ${{ matrix.cases.cuda-version }} on ${{ matrix.cases.os }})"
    runs-on: ${{ matrix.cases.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        cases:
          - { os: "ubuntu-20.04", cuda-version: "11.2.2", source: "nvidia" }
          - { os: "ubuntu-20.04", cuda-version: "11.6.2", source: "nvidia" }
          - {
              os: "ubuntu-20.04",
              cuda-version: "11.6.2",
              source: "nvidia",
              toolchain: "llvm",
              toolchain-version: "16",
            }
          - {
              os: "ubuntu-22.04",
              cuda-version: "11.5.1-1ubuntu1",
              source: "ubuntu",
            }
          - { os: "windows-2019", cuda-version: "10.1.243", source: "nvidia" }
          - { os: "windows-2019", cuda-version: "11.6.2", source: "nvidia" }
    steps:
      - uses: actions/checkout@v3

      - uses: bazelbuild/setup-bazelisk@v2
      - name: Mount bazel cache
        if: ${{ !startsWith(matrix.cases.os, 'windows') }}
        uses: actions/cache@v3
        with:
          path: ~/.cache/bazel
          key: bazel-${{ matrix.cases.os }}-cuda-${{ matrix.cases.cuda-version }}-${{ hashFiles('.bazelversion') }}

      - name: Install CUDA (NVIDIA, Linux)
        uses: Jimver/cuda-toolkit@v0.2.11
        if: ${{ !startsWith(matrix.cases.os, 'windows') && matrix.cases.source == 'nvidia' }}
        with:
          cuda: ${{ matrix.cases.cuda-version }}
          sub-packages: '["nvcc", "cudart-dev"]'
          method: network
      - name: Show bin, include, lib (NVIDIA, Linux)
        if: ${{ !startsWith(matrix.cases.os, 'windows') && matrix.cases.source == 'nvidia' }}
        run: |
          tree ${CUDA_PATH}/bin
          tree ${CUDA_PATH}/include
          tree ${CUDA_PATH}/lib64
      - name: Install LLVM ${{ matrix.cases.toolchain-version }}
        if: ${{ !startsWith(matrix.cases.os, 'windows') && matrix.cases.toolchain == 'llvm' }}
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh ${{ matrix.cases.toolchain-version }}
          sudo ln -sf /usr/bin/clang-${{ matrix.cases.toolchain-version }} /usr/bin/clang
          clang --version

          echo "build --config=clang" > $HOME/.bazelrc
          echo "build:clang --@rules_cuda//cuda:archs=sm_80" >> $HOME/.bazelrc
          echo "build:clang --spawn_strategy=local" >> $HOME/.bazelrc
      - name: Install CURAND For LLVM
        uses: Jimver/cuda-toolkit@v0.2.11
        if: ${{ !startsWith(matrix.cases.os, 'windows') && matrix.cases.toolchain == 'llvm' }}
        with:
          cuda: ${{ matrix.cases.cuda-version }}
          sub-packages: '["nvcc", "cudart-dev"]' # avoid full cuda install
          non-cuda-sub-packages: '["libcurand-dev"]'
          method: network
      - name: Install CUDA (Ubuntu)
        if: ${{ !startsWith(matrix.cases.os, 'windows') && matrix.cases.source == 'ubuntu' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y nvidia-cuda-dev=${{ matrix.cases.cuda-version }} nvidia-cuda-toolkit=${{ matrix.cases.cuda-version }} gcc-9 g++-9
          export CC=gcc-9
          export CXX=g++-9
          echo "CC=gcc-9" >> $GITHUB_ENV
          echo "CXX=g++-9" >> $GITHUB_ENV

      - name: Install CUDA (Windows)
        uses: Jimver/cuda-toolkit@v0.2.11
        if: ${{ startsWith(matrix.cases.os, 'windows') }}
        with:
          cuda: ${{ matrix.cases.cuda-version }}
          sub-packages: '["nvcc", "cudart"]'
          method: network
      - name: Show bin, include, lib64 (Windows)
        if: ${{ startsWith(matrix.cases.os, 'windows') }}
        run: |
          tree /F $env:CUDA_PATH/bin
          tree /F $env:CUDA_PATH/include
          tree /F $env:CUDA_PATH/lib/x64
      - name: Set Visual Studio Environment (Windows)
        if: ${{ startsWith(matrix.cases.os, 'windows') }}
        run: .github/workflows/Set-VSEnv.ps1 2019

      - run: bazelisk build @rules_cuda_examples//basic:all
      - run: bazelisk build @rules_cuda_examples//rdc:all
      - run: bazelisk build @rules_cuda_examples//if_cuda:main
      - run: bazelisk build @rules_cuda_examples//if_cuda:main --enable_cuda=False

      - run: cd examples && bazelisk build //basic:all --config=bzlmod
      - run: cd examples && bazelisk build //rdc:all --config=bzlmod
      - run: cd examples && bazelisk build //if_cuda:main --config=bzlmod
      - run: cd examples && bazelisk build //if_cuda:main --enable_cuda=False --config=bzlmod

      - run: bazelisk shutdown
