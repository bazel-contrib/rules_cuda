{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CUDA rules for Bazel","text":"<p>This repository contains Starlark implementation of CUDA rules in Bazel.</p> <p>These rules provide some macros and rules that make it easier to build CUDA with Bazel.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Add the following to your <code>WORKSPACE</code> file and replace the placeholders with actual values.</p> <pre><code>load(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\nhttp_archive(\n    name = \"rules_cuda\",\n    sha256 = \"{sha256_to_replace}\",\n    strip_prefix = \"rules_cuda-{git_commit_hash}\",\n    urls = [\"https://github.com/bazel-contrib/rules_cuda/archive/{git_commit_hash}.tar.gz\"],\n)\nload(\"@rules_cuda//cuda:repositories.bzl\", \"register_detected_cuda_toolchains\", \"rules_cuda_dependencies\")\nrules_cuda_dependencies()\nregister_detected_cuda_toolchains()\n</code></pre> <p>NOTE: the use of <code>register_detected_cuda_toolchains</code> depends on the environment variable <code>CUDA_PATH</code>. You must also ensure the host compiler is available. On windows, this means that you will also need to set the environment variable <code>BAZEL_VC</code> properly.</p> <p><code>detect_cuda_toolkit</code> and <code>detect_clang</code> determains how the toolchains are detected.</p>"},{"location":"#rules","title":"Rules","text":"<ul> <li><code>cuda_library</code>: Can be used to compile and create static library for CUDA kernel code. The resulting targets can be   consumed by C/C++ Rules.</li> <li><code>cuda_objects</code>: If you don't understand what device link means, you must never use it. This rule produce incomplete   object files that can only be consumed by <code>cuda_library</code>. It is created for relocatable device code and device link   time optimization source files.</li> </ul>"},{"location":"#flags","title":"Flags","text":"<p>Some flags are defined in cuda/BUILD.bazel. To use them, for example:</p> <pre><code>bazel build --@rules_cuda//cuda:archs=compute_61:compute_61,sm_61\n</code></pre> <p>In <code>.bazelrc</code> file, you can define shortcut alias for the flag, for example:</p> <pre><code># Convenient flag shortcuts.\nbuild --flag_alias=cuda_archs=@rules_cuda//cuda:archs\n</code></pre> <p>and then you can use it as following:</p> <pre><code>bazel build --cuda_archs=compute_61:compute_61,sm_61\n</code></pre>"},{"location":"#available-flags","title":"Available flags","text":"<ul> <li><code>@rules_cuda//cuda:enable</code></li> </ul> <p>Enable or disable all rules_cuda related rules. When disabled, the detected cuda toolchains will also be disabled to avoid potential human error.   By default, rules_cuda rules are enabled. See <code>examples/if_cuda</code> for how to support both cuda-enabled and cuda-free builds.</p> <ul> <li><code>@rules_cuda//cuda:archs</code></li> </ul> <p>Select the cuda archs to support. See cuda_archs specification DSL grammar.</p> <ul> <li><code>@rules_cuda//cuda:compiler</code></li> </ul> <p>Select the cuda compiler, available options are <code>nvcc</code> or <code>clang</code></p> <ul> <li><code>@rules_cuda//cuda:copts</code></li> </ul> <p>Add the copts to all cuda compile actions.</p> <ul> <li><code>@rules_cuda//cuda:host_copts</code></li> </ul> <p>Add the copts to the host compiler.</p> <ul> <li><code>@rules_cuda//cuda:runtime</code></li> </ul> <p>Set the default cudart to link, for example, <code>--@rules_cuda//cuda:runtime=@local_cuda//:cuda_runtime_static</code> link the static cuda runtime.</p> <ul> <li><code>--features=cuda_device_debug</code></li> </ul> <p>Sets nvcc flags to enable debug information in device code.   Currently ignored for clang, where <code>--compilation_mode=debug</code> applies to both   host and device code.</p>"},{"location":"#examples","title":"Examples","text":"<p>Checkout the examples to see if it fits your needs.</p> <p>See examples for basic usage.</p> <p>See rules_cuda_examples for extended real world projects.</p>"},{"location":"#known-issue","title":"Known issue","text":"<p>Sometimes the following error occurs:</p> <pre><code>cc1plus: fatal error: /tmp/tmpxft_00000002_00000019-2.cpp: No such file or directory\n</code></pre> <p>The problem is caused by nvcc use PID to determine temporary file name, and with <code>--spawn_strategy linux-sandbox</code> which is the default strategy on Linux, the PIDs nvcc sees are all very small numbers, say 2~4 due to sandboxing. <code>linux-sandbox</code> is not hermetic because it mounts root into the sandbox, thus, <code>/tmp</code> is shared between sandboxes, which is causing name conflict under high parallelism. Similar problem has been reported at nvidia forums.</p> <p>To avoid it:</p> <ul> <li>Use <code>--spawn_strategy local</code> should eliminate the case because it will let nvcc sees the true PIDs.</li> <li>Use <code>--experimental_use_hermetic_linux_sandbox</code> should eliminate the case because it will avoid the sharing of <code>/tmp</code>.</li> <li>Add <code>-objtemp</code> option to the command should reduce the case from happening.</li> </ul>"},{"location":"developer/developer_docs/","title":"Rule Authoring","text":""},{"location":"developer/developer_docs/#actionscompile","title":"actions.compile","text":"<pre>\nactions.compile(ctx, cuda_toolchain, cc_toolchain, srcs, common, pic, rdc, _prefix)\n</pre> <p>Perform CUDA compilation, return compiled object files.</p> <p>Notes:</p> <ul> <li>If <code>rdc</code> is set to <code>True</code>, then an additional step of device link must be performed.</li> <li>The rules should call this action only once in case srcs have non-unique basenames,   say <code>foo/kernel.cu</code> and <code>bar/kernel.cu</code>.</li> </ul> <p>PARAMETERS</p> Name Description Default Value ctx A context object. none cuda_toolchain A <code>platform_common.ToolchainInfo</code> of a cuda toolchain, Can be obtained with <code>find_cuda_toolchain(ctx)</code>. none cc_toolchain A <code>CcToolchainInfo</code>. Can be obtained with <code>find_cpp_toolchain(ctx)</code>. none srcs A list of <code>File</code>s to be compiled. none common A cuda common object. Can be obtained with <code>cuda_helper.create_common(ctx)</code> none pic Whether the <code>srcs</code> are compiled for position independent code. <code>False</code> rdc Whether the <code>srcs</code> are compiled for relocatable device code. <code>False</code> _prefix DON'T USE IT! Prefix of the output dir. Exposed for device link to redirect the output. <code>\"_objs\"</code> <p>RETURNS</p> <p>An compiled object <code>File</code>.</p> <p></p>"},{"location":"developer/developer_docs/#actionsdevice_link","title":"actions.device_link","text":"<pre>\nactions.device_link(ctx, cuda_toolchain, cc_toolchain, objects, common, pic, rdc, dlto)\n</pre> <p>Perform device link, return a dlink-ed object file.</p> <p>Notes:     Compilation is carried out during device linking, which involves the embeeding of the fatbin into the resulting object <code>File</code>.</p> <p>PARAMETERS</p> Name Description Default Value ctx A context object. none cuda_toolchain A <code>platform_common.ToolchainInfo</code> of a cuda toolchain, Can be obtained with <code>find_cuda_toolchain(ctx)</code>. none cc_toolchain A <code>CcToolchainInfo</code>. Can be obtained with <code>find_cpp_toolchain(ctx)</code>. none objects A <code>depset</code> of <code>File</code>s to be device linked. none common A cuda common object. Can be obtained with <code>cuda_helper.create_common(ctx)</code> none pic Whether the <code>objects</code> are compiled for position independent code. <code>False</code> rdc Whether the <code>objects</code> are device linked for relocatable device code. <code>False</code> dlto Whether the device link time optimization is enabled. <code>False</code> <p>RETURNS</p> <p>An deviced linked object <code>File</code>.</p> <p></p>"},{"location":"developer/developer_docs/#config_helperaction_is_enabled","title":"config_helper.action_is_enabled","text":"<pre>\nconfig_helper.action_is_enabled(info, name)\n</pre> <p>Returns whether a selectable is enable or not.</p> <p>PARAMETERS</p> Name Description Default Value info A <code>_FeatureConfigurationInfo</code>, returned by <code>configure_features</code>, to be queried. none name Name of the selectable, that is, an <code>action_config</code> or a <code>feature</code>. none <p></p>"},{"location":"developer/developer_docs/#config_helpercollect_selectables_info","title":"config_helper.collect_selectables_info","text":"<pre>\nconfig_helper.collect_selectables_info(selectables)\n</pre> <p>Constructor of <code>_SelectablesInfo</code>.</p> <p>PARAMETERS</p> Name Description Default Value selectables List of <code>action_config</code>s and/or <code>feature</code>s. none <p></p>"},{"location":"developer/developer_docs/#config_helperconfigure_features","title":"config_helper.configure_features","text":"<pre>\nconfig_helper.configure_features(selectables, selectables_info, requested_features,\n                                 unsupported_features, _debug)\n</pre> <p>Constructor of <code>_FeatureConfigurationInfo</code>.</p> <p>PARAMETERS</p> Name Description Default Value selectables List of <code>action_config</code>s and/or <code>feature</code>s. <code>None</code> selectables_info The <code>_SelectablesInfo</code> returned from <code>_collect_selectables_info</code> <code>None</code> requested_features List of names of <code>action_config</code>s and/or <code>feature</code>s to be enabled. <code>None</code> unsupported_features List of names of <code>action_config</code>s and/or <code>feature</code>s to be disabled. <code>None</code> _debug <p> - </p> <code>False</code> <p></p>"},{"location":"developer/developer_docs/#config_helperget_artifact_name","title":"config_helper.get_artifact_name","text":"<pre>\nconfig_helper.get_artifact_name(artifact_name_patterns, category_name, basename)\n</pre> <p>Returns artifact_name in form of <code>prefix + basename + extension</code>.</p> <p>PARAMETERS</p> Name Description Default Value artifact_name_patterns A list of <code>artifact_name_pattern</code>. none category_name A string match the <code>category_name</code> field in <code>artifact_name_pattern</code>. none basename A string. none <p></p>"},{"location":"developer/developer_docs/#config_helperget_command_line","title":"config_helper.get_command_line","text":"<pre>\nconfig_helper.get_command_line(info, action, value)\n</pre> <p>Returns flattened command line flags for given action, using given variables for expansion.</p> <p>PARAMETERS</p> Name Description Default Value info A <code>_FeatureConfigurationInfo</code>, returned by <code>configure_features</code>, to be queried. none action Name of the action. none value Build variables to be used for template expansion. none <p></p>"},{"location":"developer/developer_docs/#config_helperget_default_features_and_action_configs","title":"config_helper.get_default_features_and_action_configs","text":"<pre>\nconfig_helper.get_default_features_and_action_configs(info)\n</pre> <p>Get all default enabled features and action configs.</p> <p>Notes:     For testing purpose. Default enabled maybe disabled after configuration.</p> <p>PARAMETERS</p> Name Description Default Value info A <code>_FeatureConfigurationInfo</code>, returned by <code>configure_features</code>, to be queried. none <p></p>"},{"location":"developer/developer_docs/#config_helperget_enabled_feature","title":"config_helper.get_enabled_feature","text":"<pre>\nconfig_helper.get_enabled_feature(info)\n</pre> <p>Get all enabled features.</p> <p>Notes:     For testing purpose.</p> <p>PARAMETERS</p> Name Description Default Value info A <code>_FeatureConfigurationInfo</code>, returned by <code>configure_features</code>, to be queried. none <p></p>"},{"location":"developer/developer_docs/#config_helperget_environment_variables","title":"config_helper.get_environment_variables","text":"<pre>\nconfig_helper.get_environment_variables(info, action, value)\n</pre> <p>Returns environment variables to be set for the given action.</p> <p>PARAMETERS</p> Name Description Default Value info A <code>_FeatureConfigurationInfo</code>, returned by <code>configure_features</code>, to be queried. none action Name of the action. none value Build variables to be used for template expansion. none <p></p>"},{"location":"developer/developer_docs/#config_helperget_tool_for_action","title":"config_helper.get_tool_for_action","text":"<pre>\nconfig_helper.get_tool_for_action(info, action_name)\n</pre> <p>Returns tool path for given action.</p> <p>PARAMETERS</p> Name Description Default Value info A <code>_FeatureConfigurationInfo</code>, returned by <code>configure_features</code>, to be queried. none action_name Name of the action. none <p></p>"},{"location":"developer/developer_docs/#config_helperis_configured","title":"config_helper.is_configured","text":"<pre>\nconfig_helper.is_configured(selectables_info, name)\n</pre> <p>Whether an action or a feature exists</p> <p>PARAMETERS</p> Name Description Default Value selectables_info The <code>_SelectablesInfo</code> returned from <code>_collect_selectables_info</code> none name Name of the selectable, that is, an <code>action_config</code> or a <code>feature</code>. none <p></p>"},{"location":"developer/developer_docs/#config_helperis_enabled","title":"config_helper.is_enabled","text":"<pre>\nconfig_helper.is_enabled(info, name)\n</pre> <p>Returns whether a selectable is enable or not.</p> <p>PARAMETERS</p> Name Description Default Value info A <code>_FeatureConfigurationInfo</code>, returned by <code>configure_features</code>, to be queried. none name Name of the selectable, that is, an <code>action_config</code> or a <code>feature</code>. none <p></p>"},{"location":"developer/developer_docs/#cuda_helperaction_is_enabled","title":"cuda_helper.action_is_enabled","text":"<pre>\ncuda_helper.action_is_enabled(info, name)\n</pre> <p>Returns whether a selectable is enable or not.</p> <p>PARAMETERS</p> Name Description Default Value info A <code>_FeatureConfigurationInfo</code>, returned by <code>configure_features</code>, to be queried. none name Name of the selectable, that is, an <code>action_config</code> or a <code>feature</code>. none <p></p>"},{"location":"developer/developer_docs/#cuda_helpercheck_must_enforce_rdc","title":"cuda_helper.check_must_enforce_rdc","text":"<pre>\ncuda_helper.check_must_enforce_rdc(arch_specs, cuda_archs_info)\n</pre> <p>Force enable rdc if dlto is enabled.</p> <p>PARAMETERS</p> Name Description Default Value arch_specs <p> - </p> <code>None</code> cuda_archs_info <p> - </p> <code>None</code> <p></p>"},{"location":"developer/developer_docs/#cuda_helpercheck_srcs_extensions","title":"cuda_helper.check_srcs_extensions","text":"<pre>\ncuda_helper.check_srcs_extensions(ctx, allowed_src_files, rule_name)\n</pre> <p>Ensure ctx.attr.srcs is valid.</p> <p>PARAMETERS</p> Name Description Default Value ctx <p> - </p> none allowed_src_files <p> - </p> none rule_name <p> - </p> none <p></p>"},{"location":"developer/developer_docs/#cuda_helperconfigure_features","title":"cuda_helper.configure_features","text":"<pre>\ncuda_helper.configure_features(ctx, cuda_toolchain, requested_features, unsupported_features,\n                               _debug)\n</pre> <p>Creates a feature_configuration instance.</p> <p>PARAMETERS</p> Name Description Default Value ctx The rule context. none cuda_toolchain cuda_toolchain for which we configure features. none requested_features List of features to be enabled. <code>None</code> unsupported_features List of features that are unsupported by the current rule. <code>None</code> _debug <p> - </p> <code>False</code> <p></p>"},{"location":"developer/developer_docs/#cuda_helpercreate_common","title":"cuda_helper.create_common","text":"<pre>\ncuda_helper.create_common(ctx)\n</pre> <p>Helper to gather and process various information from <code>ctx</code> object to ease the parameter passing for internal macros.</p> <p>See <code>cuda_helper.create_common_info</code> what information a common object encapsulates.</p> <p>PARAMETERS</p> Name Description Default Value ctx <p> - </p> none <p></p>"},{"location":"developer/developer_docs/#cuda_helpercreate_common_info","title":"cuda_helper.create_common_info","text":"<pre>\ncuda_helper.create_common_info(cuda_archs_info, includes, quote_includes, system_includes, headers,\n                               transitive_headers, defines, local_defines, compile_flags, link_flags,\n                               host_defines, host_local_defines, host_compile_flags, host_link_flags,\n                               ptxas_flags, transitive_cc_info, transitive_linking_contexts)\n</pre> <p>Constructor of the common object.</p> <p>PARAMETERS</p> Name Description Default Value cuda_archs_info <code>CudaArchsInfo</code>. <code>None</code> includes include paths. Can be used with <code>#include &lt;...&gt;</code> and <code>#include \"...\"</code>. <code>[]</code> quote_includes include paths. Can be used with <code>#include \"...\"</code>. <code>[]</code> system_includes include paths. Can be used with <code>#include &lt;...&gt;</code>. <code>[]</code> headers headers directly relate with this target. <code>[]</code> transitive_headers headers transitively gather from <code>deps</code>. <code>[]</code> defines public <code>#define</code>s. Pass to compiler driver directly. Will be seen by downstream targets. <code>[]</code> local_defines private <code>#define</code>s. Pass to compiler driver directly. Will not be seen by downstream targets. <code>[]</code> compile_flags flags pass to compiler driver directly. <code>[]</code> link_flags flags pass to device linker. <code>[]</code> host_defines public <code>#define</code>s. Pass to host compiler. Will be seen by downstream targets. <code>[]</code> host_local_defines private <code>#define</code>s. Pass to host compiler. Will not be seen by downstream targets. <code>[]</code> host_compile_flags flags pass to host compiler. <code>[]</code> host_link_flags flags pass to host linker. <code>[]</code> ptxas_flags flags pass to <code>ptxas</code>. <code>[]</code> transitive_cc_info <p> - </p> <code>None</code> transitive_linking_contexts <code>CcInfo.linking_context</code> extracted from <code>deps</code> <code>[]</code> <p></p>"},{"location":"developer/developer_docs/#cuda_helpercreate_compile_variables","title":"cuda_helper.create_compile_variables","text":"<pre>\ncuda_helper.create_compile_variables(cuda_toolchain, feature_configuration, cuda_archs_info,\n                                     source_file, output_file, host_compiler, compile_flags,\n                                     host_compile_flags, include_paths, quote_include_paths,\n                                     system_include_paths, defines, host_defines, ptxas_flags,\n                                     use_pic, use_rdc)\n</pre> <p>Returns variables used for <code>compile</code> actions.</p> <p>PARAMETERS</p> Name Description Default Value cuda_toolchain cuda_toolchain for which we are creating build variables. none feature_configuration Feature configuration to be queried. none cuda_archs_info <code>CudaArchsInfo</code> none source_file source file for the compilation. <code>None</code> output_file output file of the compilation. <code>None</code> host_compiler host compiler path. <code>None</code> compile_flags flags pass to compiler driver directly. <code>[]</code> host_compile_flags flags pass to host compiler. <code>[]</code> include_paths include paths. Can be used with <code>#include &lt;...&gt;</code> and <code>#include \"...\"</code>. <code>[]</code> quote_include_paths include paths. Can be used with <code>#include \"...\"</code>. <code>[]</code> system_include_paths include paths. Can be used with <code>#include &lt;...&gt;</code>. <code>[]</code> defines <code>#define</code>s. Pass to compiler driver directly. <code>[]</code> host_defines <code>#define</code>s. Pass to host compiler. <code>[]</code> ptxas_flags flags pass to <code>ptxas</code>. <code>[]</code> use_pic whether to compile for position independent code. <code>False</code> use_rdc whether to compile for relocatable device code. <code>False</code> <p></p>"},{"location":"developer/developer_docs/#cuda_helpercreate_cuda_info","title":"cuda_helper.create_cuda_info","text":"<pre>\ncuda_helper.create_cuda_info(defines, objects, rdc_objects, pic_objects, rdc_pic_objects,\n                             archive_objects, archive_rdc_objects, archive_pic_objects,\n                             archive_rdc_pic_objects, dlink_rdc_objects, dlink_rdc_pic_objects)\n</pre> <p>Constructor for <code>CudaInfo</code>. See the providers documentation for detail.</p> <p>PARAMETERS</p> Name Description Default Value defines <p> - </p> <code>None</code> objects <p> - </p> <code>None</code> rdc_objects <p> - </p> <code>None</code> pic_objects <p> - </p> <code>None</code> rdc_pic_objects <p> - </p> <code>None</code> archive_objects <p> - </p> <code>None</code> archive_rdc_objects <p> - </p> <code>None</code> archive_pic_objects <p> - </p> <code>None</code> archive_rdc_pic_objects <p> - </p> <code>None</code> dlink_rdc_objects <p> - </p> <code>None</code> dlink_rdc_pic_objects <p> - </p> <code>None</code> <p></p>"},{"location":"developer/developer_docs/#cuda_helpercreate_device_link_variables","title":"cuda_helper.create_device_link_variables","text":"<pre>\ncuda_helper.create_device_link_variables(cuda_toolchain, feature_configuration, cuda_archs_info,\n                                         output_file, host_compiler, host_compile_flags,\n                                         user_link_flags, use_pic)\n</pre> <p>Returns variables used for <code>device_link</code> actions.</p> <p>PARAMETERS</p> Name Description Default Value cuda_toolchain cuda_toolchain for which we are creating build variables. none feature_configuration Feature configuration to be queried. none cuda_archs_info <code>CudaArchsInfo</code> none output_file output file of the device linking. <code>None</code> host_compiler host compiler path. <code>None</code> host_compile_flags flags pass to host compiler. <code>[]</code> user_link_flags flags for device linking. <code>[]</code> use_pic whether to compile for position independent code. <code>False</code> <p></p>"},{"location":"developer/developer_docs/#cuda_helperget_arch_specs","title":"cuda_helper.get_arch_specs","text":"<pre>\ncuda_helper.get_arch_specs(specs_str)\n</pre> <p>Convert string into a list of ArchSpecInfo.</p> <p>PARAMETERS</p> Name Description Default Value specs_str a string to be parsed, e.g., \"compute_70:sm_70;compute_80:sm_80,sm_86\". none <p>RETURNS</p> <p>A list of <code>ArchSpecInfo</code>s</p> <p></p>"},{"location":"developer/developer_docs/#cuda_helperget_artifact_category_from_action","title":"cuda_helper.get_artifact_category_from_action","text":"<pre>\ncuda_helper.get_artifact_category_from_action(action_name, use_pic, use_rdc)\n</pre> <p>Query the canonical artifact category name.</p> <p>PARAMETERS</p> Name Description Default Value action_name <p> - </p> none use_pic <p> - </p> <code>None</code> use_rdc <p> - </p> <code>None</code> <p></p>"},{"location":"developer/developer_docs/#cuda_helperget_artifact_name","title":"cuda_helper.get_artifact_name","text":"<pre>\ncuda_helper.get_artifact_name(cuda_toolchain, category_name, output_basename)\n</pre> <p>Create the artifact name that follow the toolchain configuration.</p> <p>PARAMETERS</p> Name Description Default Value cuda_toolchain CUDA toolchain returned by <code>find_cuda_toolchain</code>. none category_name The canonical artifact category name return by <code>cuda_helper.get_artifact_category_from_action</code> none output_basename The basename. none <p></p>"},{"location":"developer/developer_docs/#cuda_helperget_basename_without_ext","title":"cuda_helper.get_basename_without_ext","text":"<pre>\ncuda_helper.get_basename_without_ext(basename, allow_exts, fail_if_not_match)\n</pre> <p>PARAMETERS</p> Name Description Default Value basename <p> - </p> none allow_exts <p> - </p> none fail_if_not_match <p> - </p> <code>True</code> <p></p>"},{"location":"developer/developer_docs/#cuda_helperget_command_line","title":"cuda_helper.get_command_line","text":"<pre>\ncuda_helper.get_command_line(info, action, value)\n</pre> <p>Returns flattened command line flags for given action, using given variables for expansion.</p> <p>PARAMETERS</p> Name Description Default Value info A <code>_FeatureConfigurationInfo</code>, returned by <code>configure_features</code>, to be queried. none action Name of the action. none value Build variables to be used for template expansion. none <p></p>"},{"location":"developer/developer_docs/#cuda_helperget_environment_variables","title":"cuda_helper.get_environment_variables","text":"<pre>\ncuda_helper.get_environment_variables(info, action, value)\n</pre> <p>Returns environment variables to be set for the given action.</p> <p>PARAMETERS</p> Name Description Default Value info A <code>_FeatureConfigurationInfo</code>, returned by <code>configure_features</code>, to be queried. none action Name of the action. none value Build variables to be used for template expansion. none <p></p>"},{"location":"developer/developer_docs/#cuda_helperget_tool_for_action","title":"cuda_helper.get_tool_for_action","text":"<pre>\ncuda_helper.get_tool_for_action(info, action_name)\n</pre> <p>Returns tool path for given action.</p> <p>PARAMETERS</p> Name Description Default Value info A <code>_FeatureConfigurationInfo</code>, returned by <code>configure_features</code>, to be queried. none action_name Name of the action. none <p></p>"},{"location":"developer/developer_docs/#cuda_helperis_enabled","title":"cuda_helper.is_enabled","text":"<pre>\ncuda_helper.is_enabled(info, name)\n</pre> <p>Returns whether a selectable is enable or not.</p> <p>PARAMETERS</p> Name Description Default Value info A <code>_FeatureConfigurationInfo</code>, returned by <code>configure_features</code>, to be queried. none name Name of the selectable, that is, an <code>action_config</code> or a <code>feature</code>. none <p></p>"},{"location":"developer/developer_docs/#repositoriesconfig_clang","title":"repositories.config_clang","text":"<pre>\nrepositories.config_clang(repository_ctx, cuda, clang_path)\n</pre> <p>Generate <code>@local_cuda//toolchain/clang/BUILD</code></p> <p>PARAMETERS</p> Name Description Default Value repository_ctx repository_ctx none cuda The struct returned from <code>detect_cuda_toolkit</code> none clang_path Path to clang executable returned from <code>detect_clang</code> none <p></p>"},{"location":"developer/developer_docs/#repositoriesconfig_cuda_toolkit_and_nvcc","title":"repositories.config_cuda_toolkit_and_nvcc","text":"<pre>\nrepositories.config_cuda_toolkit_and_nvcc(repository_ctx, cuda)\n</pre> <p>Generate <code>@local_cuda//BUILD</code> and <code>@local_cuda//defs.bzl</code> and <code>@local_cuda//toolchain/BUILD</code></p> <p>PARAMETERS</p> Name Description Default Value repository_ctx repository_ctx none cuda The struct returned from detect_cuda_toolkit none <p></p>"},{"location":"developer/developer_docs/#repositoriesdetect_clang","title":"repositories.detect_clang","text":"<pre>\nrepositories.detect_clang(repository_ctx)\n</pre> <p>Detect local clang installation.</p> <p>The path to clang is determined by:</p> <ul> <li>taken from <code>CUDA_CLANG_PATH</code> environment variable or</li> <li>taken from <code>BAZEL_LLVM</code> environment variable as <code>$BAZEL_LLVM/bin/clang</code> or</li> <li>determined through <code>which clang</code> or</li> <li>treated as being not detected and not configured</li> </ul> <p>PARAMETERS</p> Name Description Default Value repository_ctx repository_ctx none <p>RETURNS</p> <p>clang_path (str | None): Optionally return a string of path to clang executable if detected.</p> <p></p>"},{"location":"developer/developer_docs/#repositoriesdetect_cuda_toolkit","title":"repositories.detect_cuda_toolkit","text":"<pre>\nrepositories.detect_cuda_toolkit(repository_ctx)\n</pre> <p>Detect CUDA Toolkit.</p> <p>The path to CUDA Toolkit is determined as:   - the value of <code>toolkit_path</code> passed to local_cuda as an attribute   - taken from <code>CUDA_PATH</code> environment variable or   - determined through 'which ptxas' or   - defaults to '/usr/local/cuda'</p> <p>PARAMETERS</p> Name Description Default Value repository_ctx repository_ctx none <p>RETURNS</p> <p>A struct contains the information of CUDA Toolkit.</p> <p></p>"},{"location":"developer/developer_docs/#toolchainfind_cuda_toolchain","title":"toolchain.find_cuda_toolchain","text":"<pre>\ntoolchain.find_cuda_toolchain(ctx)\n</pre> <p>Helper to get the cuda toolchain from context object.</p> <p>PARAMETERS</p> Name Description Default Value ctx The rule context for which to find a toolchain. none <p>RETURNS</p> <p>A <code>platform_common.ToolchainInfo</code> that wraps around the necessary information of a cuda toolchain.</p> <p></p>"},{"location":"developer/developer_docs/#toolchainfind_cuda_toolkit","title":"toolchain.find_cuda_toolkit","text":"<pre>\ntoolchain.find_cuda_toolkit(ctx)\n</pre> <p>Finds the CUDA toolchain.</p> <p>PARAMETERS</p> Name Description Default Value ctx The rule context for which to find a toolchain. none <p>RETURNS</p> <p>A CudaToolkitInfo.</p> <p></p>"},{"location":"developer/developer_docs/#toolchainuse_cpp_toolchain","title":"toolchain.use_cpp_toolchain","text":"<pre>\ntoolchain.use_cpp_toolchain(mandatory)\n</pre> <p>Helper to depend on the C++ toolchain.</p> <p>Notes:     Copied from toolchain_utils.bzl</p> <p>PARAMETERS</p> Name Description Default Value mandatory <p> - </p> <code>True</code> <p></p>"},{"location":"developer/developer_docs/#toolchainuse_cuda_toolchain","title":"toolchain.use_cuda_toolchain","text":"<pre>\ntoolchain.use_cuda_toolchain()\n</pre> <p>Helper to depend on the CUDA toolchain.</p>"},{"location":"developer/providers_docs/","title":"Providers","text":""},{"location":"developer/providers_docs/#archspecinfo","title":"ArchSpecInfo","text":"<pre>\nArchSpecInfo(stage1_arch, stage2_archs)\n</pre> <p>Provides the information of how GPU compilation is carried out of a single virtual architecture.</p> <p>FIELDS</p> Name Description stage1_arch A virtual architecture, str, arch number only stage2_archs A list of virtual or gpu architecture, list of Stage2ArchInfo <p></p>"},{"location":"developer/providers_docs/#cudaarchsinfo","title":"CudaArchsInfo","text":"<pre>\nCudaArchsInfo(arch_specs)\n</pre> <p>Provides a list of CUDA archs to compile for.</p> <p>Read the whole Chapter 5 of CUDA Compiler Driver NVCC Reference Guide if more detail is needed.</p> <p>FIELDS</p> Name Description arch_specs A list of ArchSpecInfo <p></p>"},{"location":"developer/providers_docs/#cudainfo","title":"CudaInfo","text":"<pre>\nCudaInfo(defines, objects, pic_objects, rdc_objects, rdc_pic_objects, archive_objects,\n         archive_pic_objects, archive_rdc_objects, archive_rdc_pic_objects, dlink_rdc_objects,\n         dlink_rdc_pic_objects)\n</pre> <p>Provides cuda build artifacts that can be consumed by device linking or linking process.</p> <p>This provider is analog to CcInfo but only contains necessary information for linking in a flat structure. Objects are grouped by direct and transitive, because we have no way to split them again if merged a single depset.</p> <p>FIELDS</p> Name Description defines A depset of strings. It is used for the compilation during device linking. objects A depset of objects. Direct artifacts of the rule. pic_objects A depset of position indepentent code objects. Direct artifacts of the rule. rdc_objects A depset of relocatable device code objects. Direct artifacts of the rule. rdc_pic_objects A depset of relocatable device code and position indepentent code objects. Direct artifacts of the rule. archive_objects A depset of rdc objects. cuda_objects only. Gathered from the transitive dependencies for archiving. archive_pic_objects A depset of rdc pic objects. cuda_objects only. Gathered from the transitive dependencies for archiving. archive_rdc_objects A depset of rdc objects. cuda_objects only. Gathered from the transitive dependencies for archiving or device linking. archive_rdc_pic_objects A depset of rdc pic objects. cuda_objects only. Gathered from the transitive dependencies for archiving or device linking. dlink_rdc_objects A depset of rdc objects. cuda_library only. Gathered from the transitive dependencies for device linking. dlink_rdc_pic_objects A depset of rdc pic objects. cuda_library only. Gathered from the transitive dependencies for device linking. <p></p>"},{"location":"developer/providers_docs/#cudatoolchainconfiginfo","title":"CudaToolchainConfigInfo","text":"<pre>\nCudaToolchainConfigInfo(action_configs, artifact_name_patterns, cuda_toolkit, features,\n                        toolchain_identifier)\n</pre> <p>Provides the information of what the toolchain is and how the toolchain is configured.</p> <p>FIELDS</p> Name Description action_configs A list of action_configs. artifact_name_patterns A list of artifact_name_patterns. cuda_toolkit CudaToolkitInfo features A list of features. toolchain_identifier nvcc or clang <p></p>"},{"location":"developer/providers_docs/#cudatoolkitinfo","title":"CudaToolkitInfo","text":"<pre>\nCudaToolkitInfo(path, version_major, version_minor, nvlink, link_stub, bin2c, fatbinary)\n</pre> <p>Provides the information of CUDA Toolkit.</p> <p>FIELDS</p> Name Description path string of path to cuda toolkit root version_major int of the cuda toolkit major version, e.g, 11 for 11.6 version_minor int of the cuda toolkit minor version, e.g, 6 for 11.6 nvlink File to the nvlink executable link_stub File to the link.stub file bin2c File to the bin2c executable fatbinary File to the fatbinary executable <p></p>"},{"location":"developer/providers_docs/#stage2archinfo","title":"Stage2ArchInfo","text":"<pre>\nStage2ArchInfo(arch, virtual, gpu, lto)\n</pre> <p>Provides the information of how the stage 2 complation is carried out.</p> <p>One and only one of <code>virtual</code>, <code>gpu</code> and <code>lto</code> must be set to True. For example, if <code>arch</code> is set to <code>80</code> and <code>virtual</code> is <code>True</code>, then a ptx embedding process is carried out for <code>compute_80</code>. Multiple <code>Stage2ArchInfo</code> can be used for specifying how a stage 1 result is transformed into its final form.</p> <p>FIELDS</p> Name Description arch str, arch number virtual bool, use virtual arch, default False gpu bool, use gpu arch, default False lto bool, use lto, default False"},{"location":"user/toolchain_config_docs/","title":"Configure the toolchain","text":""},{"location":"user/toolchain_config_docs/#cuda_toolchain","title":"cuda_toolchain","text":"<pre>\ncuda_toolchain(name, compiler_executable, compiler_files, toolchain_config)\n</pre> <p>This rule consumes a <code>CudaToolchainConfigInfo</code> and provides a <code>platform_common.ToolchainInfo</code>, a.k.a, the CUDA Toolchain.</p> <p>ATTRIBUTES</p> Name Description Type Mandatory Default name A unique name for this target. Name required compiler_executable The path of the main executable of this toolchain. String required compiler_files The set of files that are needed when compiling using this toolchain. Label optional <code>None</code> toolchain_config A target that provides a <code>CudaToolchainConfigInfo</code>. Label required <p></p>"},{"location":"user/toolchain_config_docs/#cuda_toolchain_config_clang","title":"cuda_toolchain_config_clang","text":"<pre>\ncuda_toolchain_config_clang(name, cuda_toolkit, toolchain_identifier)\n</pre> <p>This rule provides the predefined cuda toolchain configuration for Clang.</p> <p>ATTRIBUTES</p> Name Description Type Mandatory Default name A unique name for this target. Name required cuda_toolkit A target that provides a <code>CudaToolkitInfo</code>. Label required toolchain_identifier - String required <p></p>"},{"location":"user/toolchain_config_docs/#cuda_toolchain_config_nvcc","title":"cuda_toolchain_config_nvcc","text":"<pre>\ncuda_toolchain_config_nvcc(name, cuda_toolkit, nvcc_version_major, nvcc_version_minor,\n                           toolchain_identifier)\n</pre> <p>This rule provides the predefined cuda toolchain configuration for NVCC with non MSVC as host compiler.</p> <p>ATTRIBUTES</p> Name Description Type Mandatory Default name A unique name for this target. Name required cuda_toolkit A target that provides a <code>CudaToolkitInfo</code>. Label required nvcc_version_major The CUDA Toolkit major version, e.g, 11 for 11.6 Integer optional <code>0</code> nvcc_version_minor The CUDA Toolkit minor version, e.g, 6 for 11.6 Integer optional <code>0</code> toolchain_identifier - String required <p></p>"},{"location":"user/toolchain_config_docs/#cuda_toolchain_config_nvcc_msvc","title":"cuda_toolchain_config_nvcc_msvc","text":"<pre>\ncuda_toolchain_config_nvcc_msvc(name, cuda_toolkit, msvc_env_tmp, nvcc_version_major,\n                                nvcc_version_minor, toolchain_identifier)\n</pre> <p>This rule provides the predefined cuda toolchain configuration for NVCC with MSVC as host compiler.</p> <p>ATTRIBUTES</p> Name Description Type Mandatory Default name A unique name for this target. Name required cuda_toolkit A target that provides a <code>CudaToolkitInfo</code>. Label required msvc_env_tmp The TEMP directory. String optional <code>\"\"</code> nvcc_version_major The CUDA Toolkit major version, e.g, 11 for 11.6 Integer optional <code>0</code> nvcc_version_minor The CUDA Toolkit minor version, e.g, 6 for 11.6 Integer optional <code>0</code> toolchain_identifier - String required <p></p>"},{"location":"user/toolchain_config_docs/#cuda_toolkit","title":"cuda_toolkit","text":"<pre>\ncuda_toolkit(name, bin2c, fatbinary, link_stub, nvlink, path, version)\n</pre> <p>This rule provides CudaToolkitInfo.</p> <p>ATTRIBUTES</p> Name Description Type Mandatory Default name A unique name for this target. Name required bin2c The bin2c executable. Label optional <code>None</code> fatbinary The fatbinary executable. Label optional <code>None</code> link_stub The link.stub text file. Label optional <code>None</code> nvlink The nvlink executable. Label optional <code>None</code> path Root path to the CUDA Toolkit. String required version Version of the CUDA Toolkit. String required"},{"location":"user/user_docs/","title":"Using the rules","text":""},{"location":"user/user_docs/#cuda_archs","title":"cuda_archs","text":"<pre>\ncuda_archs(name)\n</pre> <p>A build setting for specifying cuda archs to compile for.</p> <p>To retain the flexiblity of NVCC, the extended notation is adopted.</p> <p>When passing cuda_archs from commandline, its spec grammar is as follows:</p> <pre><code>ARCH_SPECS   ::= ARCH_SPEC [ ';' ARCH_SPECS ]\nARCH_SPEC    ::= [ VIRTUAL_ARCH ':' ] GPU_ARCHS\nGPU_ARCHS    ::= GPU_ARCH [ ',' GPU_ARCHS ]\nGPU_ARCH     ::= 'sm_' ARCH_NUMBER\n               | 'lto_' ARCH_NUMBER\n               | VIRTUAL_ARCH\nVIRTUAL_ARCH ::= 'compute_' ARCH_NUMBER\n               | 'lto_' ARCH_NUMBER\nARCH_NUMBER  ::= (a string in predefined cuda_archs list)\n</code></pre> <p>E.g.:</p> <ul> <li><code>compute_80:sm_80,sm_86</code>:   Use <code>compute_80</code> PTX, generate cubin with <code>sm_80</code> and <code>sm_86</code>, no PTX embedded</li> <li><code>compute_80:compute_80,sm_80,sm_86</code>:   Use <code>compute_80</code> PTX, generate cubin with <code>sm_80</code> and <code>sm_86</code>, PTX embedded</li> <li><code>compute_80:compute_80</code>:   Embed <code>compute_80</code> PTX, fully relay on <code>ptxas</code></li> <li><code>sm_80,sm_86</code>:   Same as <code>compute_80:sm_80,sm_86</code>, the arch with minimum integer value will be automatically populated.</li> <li><code>sm_80;sm_86</code>:   Two specs used.</li> <li><code>compute_80</code>:   Same as <code>compute_80:compute_80</code></li> </ul> <p>Best Practices:</p> <ul> <li>Library supports a full range of archs from xx to yy, you should embed the yy PTX</li> <li>Library supports a sparse range of archs from xx to yy, you should embed the xx PTX</li> </ul> <p>ATTRIBUTES</p> Name Description Type Mandatory Default name A unique name for this target. Name required <p></p>"},{"location":"user/user_docs/#cuda_library","title":"cuda_library","text":"<pre>\ncuda_library(name, deps, srcs, hdrs, alwayslink, copts, defines, host_copts, host_defines,\n             host_linkopts, host_local_defines, includes, linkopts, local_defines, ptxasopts, rdc)\n</pre> <p>This rule compiles and creates static library for CUDA kernel code. The resulting targets can then be consumed by C/C++ Rules.</p> <p>ATTRIBUTES</p> Name Description Type Mandatory Default name A unique name for this target. Name required deps - List of labels optional <code>[]</code> srcs - List of labels optional <code>[]</code> hdrs - List of labels optional <code>[]</code> alwayslink - Boolean optional <code>False</code> copts Add these options to the CUDA device compilation command. List of strings optional <code>[]</code> defines List of defines to add to the compile line. List of strings optional <code>[]</code> host_copts Add these options to the CUDA host compilation command. List of strings optional <code>[]</code> host_defines List of defines to add to the compile line. List of strings optional <code>[]</code> host_linkopts Add these flags to the host library link command. List of strings optional <code>[]</code> host_local_defines List of defines to add to the compile line, but only apply to this rule. List of strings optional <code>[]</code> includes List of include dirs to be added to the compile line. List of strings optional <code>[]</code> linkopts Add these flags to the CUDA device link command. List of strings optional <code>[]</code> local_defines List of defines to add to the compile line, but only apply to this rule. List of strings optional <code>[]</code> ptxasopts Add these flags to the ptxas command. List of strings optional <code>[]</code> rdc Whether to perform device linking for relocateable device code. Transitive deps that contain device code must all either be cuda_objects or cuda_library(rdc = True). Boolean optional <code>False</code> <p></p>"},{"location":"user/user_docs/#cuda_objects","title":"cuda_objects","text":"<pre>\ncuda_objects(name, deps, srcs, hdrs, copts, defines, host_copts, host_defines, host_local_defines,\n             includes, local_defines, ptxasopts)\n</pre> <p>This rule produces incomplete object files that can only be consumed by <code>cuda_library</code>. It is created for relocatable device code and device link time optimization source files.</p> <p>ATTRIBUTES</p> Name Description Type Mandatory Default name A unique name for this target. Name required deps - List of labels optional <code>[]</code> srcs - List of labels optional <code>[]</code> hdrs - List of labels optional <code>[]</code> copts Add these options to the CUDA device compilation command. List of strings optional <code>[]</code> defines List of defines to add to the compile line. List of strings optional <code>[]</code> host_copts Add these options to the CUDA host compilation command. List of strings optional <code>[]</code> host_defines List of defines to add to the compile line. List of strings optional <code>[]</code> host_local_defines List of defines to add to the compile line, but only apply to this rule. List of strings optional <code>[]</code> includes List of include dirs to be added to the compile line. List of strings optional <code>[]</code> local_defines List of defines to add to the compile line, but only apply to this rule. List of strings optional <code>[]</code> ptxasopts Add these flags to the ptxas command. List of strings optional <code>[]</code> <p></p>"},{"location":"user/user_docs/#cuda_test","title":"cuda_test","text":"<pre>\ncuda_test(name, attrs)\n</pre> <p>Wrapper to ensure the test is compiled with the CUDA compiler.</p> <p>PARAMETERS</p> Name Description Default Value name <p> - </p> none attrs <p> - </p> none <p></p>"},{"location":"user/user_docs/#register_detected_cuda_toolchains","title":"register_detected_cuda_toolchains","text":"<pre>\nregister_detected_cuda_toolchains()\n</pre> <p>Helper to register the automatically detected CUDA toolchain(s).</p> <p>User can setup their own toolchain if needed and ignore the detected ones by not calling this macro.</p> <p></p>"},{"location":"user/user_docs/#rules_cuda_dependencies","title":"rules_cuda_dependencies","text":"<pre>\nrules_cuda_dependencies(toolkit_path)\n</pre> <p>Populate the dependencies for rules_cuda. This will setup workspace dependencies (other bazel rules) and local toolchains.</p> <p>PARAMETERS</p> Name Description Default Value toolkit_path Optionally specify the path to CUDA toolkit. If not specified, it will be detected automatically. <code>None</code>"}]}